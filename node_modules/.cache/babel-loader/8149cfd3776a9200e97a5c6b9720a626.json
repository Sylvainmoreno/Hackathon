{"ast":null,"code":"var _jsxFileName = \"/home/wilder/quetes/hackathon/Hackathon-halloween/src/Components/Sylvain/Pagefilms.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport CardFilms from './CardFilms';\nimport { arrowFunctionExpression } from '@babel/types';\n/*const PageFilms = (props) => {\n\n    const test = 'Marathon'\n    const [movies, setMovies] = useState([])\n\n    useEffect(() => {\n        getApi()\n    }, [])\n\n\n    const getApi = () => {\n        axios.get('https://hackathon-wild-hackoween.herokuapp.com/movies')\n            .then(response => setMovies(response.data.movies))\n            console.log(movies)\n        }*/\n\nclass PageFilms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://hackathon-wild-hackoween.herokuapp.com/movies').then(response => {\n      this.setState({\n        movies: response.data.movies\n      });\n      console.log(this.state.movies);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, movies.map(movie => {\n      if (test === 'Marathon') {\n        movie.filter(titleVerify => {\n          return titleVerify.title = 'Final_Destination' ? React.createElement(CardFilms, {\n            title: movie.title,\n            image: movie.posterUrl,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }) : \"\";\n        });\n      }\n\n      return movie;\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"test\"));\n  }\n\n}\n\nexport default PageFilms; //return (<CardFilms title={x.title} image={x.posterUrl}/> )}})}\n//  {test = 'Marathon' ? x.filter(y => {y.title == 'Final_Destination'} <CardFilms />)\n//<CardFilms title={x.title} image={x.posterUrl} />\n//|| y.title == 'Final_ Destnation_2' || y.title == 'Final_ Destnation_3' || y.title == 'Final_ Destnation_4' || y.title == 'Final_ Destnation_5' || y.title == 'Scream' || y.title == 'Scream_2' || y.title == 'Scream_3' || y.title == 'Scream_4' || y.title == 'Paranormal_Activity' || y.title == 'Paranormal_Activity_2' || y.title == '[REC]' || y.title == '[REC]_2' || y.title == 'Saw' || y.title == 'Saw_2' || y.title == 'Saw_3' || y.title == 'Saw_4' || y.title == 'Saw_5' || y.title == 'Saw_6' || y.title == 'Saw_3D' || y.title == 'The_Hill_Have_Eyes' || y.title == 'The_Hill_Have_Eyes_2' || y.title == 'Insidious' || y.title == 'Insidious:_Chapter_2'","map":{"version":3,"sources":["/home/wilder/quetes/hackathon/Hackathon-halloween/src/Components/Sylvain/Pagefilms.js"],"names":["React","useEffect","useState","axios","CardFilms","arrowFunctionExpression","PageFilms","Component","constructor","props","state","movies","componentDidMount","get","then","response","setState","data","console","log","render","map","movie","test","filter","titleVerify","title","posterUrl"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,uBAAT,QAAwC,cAAxC;AAIA;;;;;;;;;;;;;;;;AAgBQ,MAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAG;AADA,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAE;AACfT,IAAAA,KAAK,CAACU,GAAN,CAAU,uDAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AACd,WAAKC,QAAL,CAAc;AACVL,QAAAA,MAAM,EAAEI,QAAQ,CAACE,IAAT,CAAcN;AADZ,OAAd;AAGAO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWC,MAAvB;AACH,KAND;AAOH;;AACLS,EAAAA,MAAM,GAAE;AACR,WACA,0CAWKT,MAAM,CAACU,GAAP,CAAYC,KAAK,IAAG;AACjB,UAAIC,IAAI,KAAK,UAAb,EAAwB;AACpBD,QAAAA,KAAK,CAACE,MAAN,CAAaC,WAAW,IAAI;AACzB,iBAAQA,WAAW,CAACC,KAAZ,GAAoB,sBAAsB,oBAAC,SAAD;AAAW,YAAA,KAAK,EAAEJ,KAAK,CAACI,KAAxB;AAA+B,YAAA,KAAK,EAAEJ,KAAK,CAACK,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAtB,GAAiF,EAA7G;AACF,SAFD;AAGH;;AACD,aAAOL,KAAP;AACH,KAPA,CAXL,EAqBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBJ,CADA;AAyBP;;AA3C+C;;AA6ChD,eAAehB,SAAf,C,CAEA;AAEA;AAGA;AAEA","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport CardFilms from './CardFilms'\nimport { arrowFunctionExpression } from '@babel/types'\n\n\n\n/*const PageFilms = (props) => {\n\n    const test = 'Marathon'\n    const [movies, setMovies] = useState([])\n\n    useEffect(() => {\n        getApi()\n    }, [])\n\n\n    const getApi = () => {\n        axios.get('https://hackathon-wild-hackoween.herokuapp.com/movies')\n            .then(response => setMovies(response.data.movies))\n            console.log(movies)\n        }*/\n\n        class PageFilms extends React.Component {\n            constructor(props){\n                super(props)\n                this.state = {\n                    movies : []\n                }\n            }\n\n            componentDidMount(){\n                axios.get('https://hackathon-wild-hackoween.herokuapp.com/movies')\n                .then(response => {\n                    this.setState({\n                        movies: response.data.movies\n                    })\n                    console.log(this.state.movies)\n                })\n            }\n        render(){\n        return (\n        <>\n           {/* {movie.map(x => {\n                {test = 'Marathon' ? \n                x.filter(y => {\n                    y.title = 'Final_Destination' \n                \n                    return <CardFilms title={x.title} image={x.posterUrl}/>\n                })\n                \n                : ''\n            }})}*/}\n            {movies.map( movie =>{\n                if (test === 'Marathon'){\n                    movie.filter(titleVerify => {\n                       return  titleVerify.title = 'Final_Destination' ? <CardFilms title={movie.title} image={movie.posterUrl}/> : \"\";\n                    })\n                }                     \n                return movie\n            })}\n\n         \n            <p>test</p>\n        </>\n    )\n}}\n\nexport default PageFilms\n\n//return (<CardFilms title={x.title} image={x.posterUrl}/> )}})}\n\n//  {test = 'Marathon' ? x.filter(y => {y.title == 'Final_Destination'} <CardFilms />)\n\n\n//<CardFilms title={x.title} image={x.posterUrl} />\n\n//|| y.title == 'Final_ Destnation_2' || y.title == 'Final_ Destnation_3' || y.title == 'Final_ Destnation_4' || y.title == 'Final_ Destnation_5' || y.title == 'Scream' || y.title == 'Scream_2' || y.title == 'Scream_3' || y.title == 'Scream_4' || y.title == 'Paranormal_Activity' || y.title == 'Paranormal_Activity_2' || y.title == '[REC]' || y.title == '[REC]_2' || y.title == 'Saw' || y.title == 'Saw_2' || y.title == 'Saw_3' || y.title == 'Saw_4' || y.title == 'Saw_5' || y.title == 'Saw_6' || y.title == 'Saw_3D' || y.title == 'The_Hill_Have_Eyes' || y.title == 'The_Hill_Have_Eyes_2' || y.title == 'Insidious' || y.title == 'Insidious:_Chapter_2'"]},"metadata":{},"sourceType":"module"}